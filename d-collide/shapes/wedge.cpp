/*******************************************************************************
 *  Copyright (C) 2007 by the members of PG 510, University of Dortmund:       *
 *              d-collide-users@lists.sourceforge.net                          *
 *     Andreas Beckermann, Christian Bode, Marcel Ens, Sebastian Ens,          *
 *     Martin Fassbach, Maximilian Hegele, Daniel Haus, Oliver Horst,          *
 *     Gregor Jochmann, Timo Loist, Marcel Nienhaus and Marc Schulz            *
 *                                                                             *
 *  All rights reserved.                                                       *
 *                                                                             *
 *  Redistribution and use in source and binary forms, with or without         *
 *  modification, are permitted provided that the following conditions are met:*
 *   - Redistributions of source code must retain the above copyright          *
 *     notice, this list of conditions and the following disclaimer.           *
 *   - Redistributions in binary form must reproduce the above copyright       *
 *     notice, this list of conditions and the following disclaimer in the     *
 *     documentation and/or other materials provided with the distribution.    *
 *   - Neither the name of the PG510 nor the names of its contributors may be  *
 *     used to endorse or promote products derived from this software without  *
 *     specific prior written permission.                                      *
 *                                                                             *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS        *
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT          *
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR      *
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER *
 *  OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,   *
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,        *
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR         *
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF     *
 *  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING       *
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS         *
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE                *
 *******************************************************************************/

#include "proxy.h"

#include "shapes/wedge.h"
#include "shapes/mesh.h"
#include "shapes/mesh/meshfactory.h"


namespace dcollide {
    /*!
     * \brief Destroy objects according to the ownership notices.
     */
    Wedge::~Wedge() {
        delete mMesh;
    }

    /*!
     * \brief Generates a simple wedge mesh out of eight triangles according to
     *        \ref getDimensions.
     *
     * The Mesh representation is generated by \ref MeshFactory::createWedge
     */
    void Wedge::generateMesh() {
        MeshFactory meshFactory;
        mMesh = meshFactory.createWedge(mDimensions);;
        mMesh->setProxy(mProxy);
    }

    /*!
     * \returns all 6 vertices of the wedge, see sketch for the order
     *
     *         4------5
     *  ^     /|     /|
     *  |    / |    / | z 
     *  |   /  |   /  |
     *  |  /   2--/---3
     *  | /  *   /  *y
     *  |/ *    / *  
     *  0------1-------->
     *     x
     * 
     */
    const Vector3* Wedge::getVertices() {
        const Matrix& m = getProxy()->getWorldTransformation();

        mVertices[0] = m.getPosition();
        m.transform(&mVertices[1], Vector3(mDimensions[0], 0, 0));
        m.transform(&mVertices[2], Vector3(0,mDimensions[1],0));
        m.transform(&mVertices[4], Vector3(0,mDimensions[1],mDimensions[2]));

        Vector3 xEdge = mVertices[1] - mVertices[0];
        Vector3 yEdge = mVertices[2] - mVertices[0];
        Vector3 zEdge = mVertices[4] - mVertices[2];

        mVertices[3] = mVertices[0] + yEdge + xEdge;
        mVertices[5] = mVertices[0] + zEdge + xEdge + yEdge;

        return mVertices;
    }

    /*!
     * \brief calculates the planes of the box
     *
     * \param vs if given, use these vertices instead of recalculating them
     */
    const Plane* Wedge::getPlanes(const Vector3* vs) {

        if (!vs) {
            vs = getVertices();
        }

        /* opposing planes along each axis (see apidocs of Wedge::getVertices()
         * for the order of the returned vertices):
         * normal = crossproduct of 2 vectors representing the face, use
         * right-hand-rule to determine in what direction the normal points
         * Planes 0,1 and 2,3 are opposing */
        // all normals are pointing OUTSIDE the wedge
        mPlanes[0] = Plane((vs[1]-vs[0])*(vs[4]-vs[0]),vs[0],true);
        mPlanes[1] = Plane(((vs[2]-vs[0])*(vs[1]-vs[0])),vs[0],true);
        mPlanes[2] = Plane(((vs[5]-vs[3])*(vs[1]-vs[3])),vs[3],true);
        mPlanes[3] = Plane((vs[0]-vs[2])*(vs[4]-vs[2]),vs[2],true);
        mPlanes[4] = Plane(((vs[4]-vs[2])*(vs[3]-vs[2])),vs[2],true);

        return mPlanes;
    }

    /*!
     * \returns the unrotated center of the box
     *
     */
    const Vector3 Wedge::getUnrotatedCenter() {
        const Matrix& m = getProxy()->getWorldTransformation();

        Vector3 center =
            (m.getPosition()+Vector3(mDimensions)/2);
        return center;
    }


    /*!
     * \brief the "edges" of the wedge
     *
     * \param edges Here we save the edges, each pair represents one edge
     * beetween two verteces indexed by these two ints
     */
    const void Wedge::getEdges(std::pair<int,int>(&edges)[9]) const {
        // defining them:
        edges[0] = std::pair<int,int>(0,1);
        edges[1] = std::pair<int,int>(1,3);
        edges[2] = std::pair<int,int>(3,2);
        edges[3] = std::pair<int,int>(2,0);
        edges[4] = std::pair<int,int>(0,4);
        edges[5] = std::pair<int,int>(1,5);
        edges[6] = std::pair<int,int>(4,5);
        edges[7] = std::pair<int,int>(2,4);
        edges[8] = std::pair<int,int>(3,5);
    }

    /*!
     * \brief Enables the use of std::cout for the Wedge class.
     * 
     * When used the three dimension are printed out in the following order:
     * 1. width (\p a)
     * 2. height (\p b)
     * 3. depth (\p h).
     */
    std::ostream& operator<<(std::ostream& os, const dcollide::Wedge& v) {
        os <<"(Wedge: dim1 = " << *v.getDimensions() 
            << ", dim2 = " << *(v.getDimensions()+1)
            << ", dim3 = " << *(v.getDimensions()+2) << ")";
        return os;
    }
}
/*
 * vim: et sw=4 ts=4
 */
